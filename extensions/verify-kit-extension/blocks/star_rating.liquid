<style>
  .alert-success {
    padding: 5px;

    font-size: 14px;
    margin-bottom: 20px;
  }

  .alert-error {
    padding: 5px;
    font-size: 14px;
    margin-bottom: 20px;
  }

  .loader {
    border: 3px solid #f3f3f3;
    /* Light grey background */
    border-top: 3px solid #3498db;
    /* Blue */
    border-radius: 50%;
    width: 14px;
    height: 14px;
    animation: spin 1s linear infinite;
    display: inline-block;
    vertical-align: middle;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  /* Optional: Adjust button size and alignment */
  #myButton {
    padding: 10px 20px;
    font-size: 16px;
  }


  .tab {
    cursor: pointer;
    padding: 10px;
    border: 1px solid #ccc;
    display: inline-block;
    font-size: 14px;
  }

  .tab-content {
    border: 1px solid #ccc;
    border-top: none;
    padding: 10px;
    display: none;
  }

  .active {
    background-color: #eee;
  }

  .alert-e {
    padding: 20px;
    background-color: #f44336;
    color: white;
    font-size: 14px;
  }

  .alert-s {
    padding: 20px;
    background-color: #8ddd7c;
    color: white;
    font-size: 14px;
  }

  .closebtn {
    margin-left: 15px;
    color: white;
    font-weight: bold;
    float: right;
    font-size: 22px;
    line-height: 20px;
    cursor: pointer;
    transition: 0.3s;
  }

  .closebtn:hover {
    color: black;
  }

  .trx_field__input {
    border: 1px solid black;
  }

  .trx_field {
    display: flex;
    justify-content: start;
    flex-direction: column;
  }

  .trax-container {
    width: 50%;
    margin: 0 auto;
  }

  @media (max-width: 767px) {
    .trax-container {
      width: 100% !important;
      padding: 0 25px;
    }

  }

  .text-danger {
    color: red;
  }
</style>


<div class="trax-container">

  <div>
    <div class="tab active" onclick="changeTab('tab1')">Register Test Barcode</div>
    <div class="tab" onclick="changeTab('tab2')">Check Test Status</div>
  </div>

  <div id="tab1" class="tab-content" style="display: block;">
    <form id="myForm2" method="post" style="margin-bottom:30px">

      <div class="trx_field" style="margin-top: 15px;">
        <label class="trx_field__label" for="name">Full Name</label>
        <input class="trx_field__input" autocomplete="name" type="text" id="name" name="name" required placeholder="">
      </div>
      <div class="trx_field" style="margin-top: 15px;">
        <label class="trx_field__label" for="phone">Phone</label>
        <input class="trx_field__input" autocomplete="phone" type="text" id="phone" name="phone" required
          placeholder="">
      </div>
      <div class="trx_field" style="margin-top: 15px;">
        <label class="trx_field__label" for="email">Email</label>
        <input class="trx_field__input" autocomplete="name" type="text" id="email" name="email" required placeholder="">
      </div>
      <div class="trx_field" style="margin-top: 15px;">
        <label class="trx_field__label" for="barcode">Barcode</label>
        <input class="trx_field__input" autocomplete="name" type="text" id="barcode" name="barcode" required
          placeholder="">
      </div>
      <input type="hidden" name="store_url" id="store_url" value="{{ shop.url }}" />

      <div class="d-flex">
        <button type="button" id="register" onclick="registerCustomer()" class="button" style="margin-top: 10px;">
          <span id="rg_btn">Register</span>
          <div id="loader_3" class="loader" style="display: none;"></div>
        </button>
      </div>
    </form>

    <div class="alert-s hidden" id="reg_success">
      <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
      <strong>Success!</strong> Registration successfull.
    </div>
    <div id="reg_errs" class="alert-e hidden">
      <strong>Error!</strong>
      <ul id="errorList"></ul>
    </div>

  </div>

  <div id="tab2" class="tab-content">
    <!-- You will need to replace 'action' with a valid Liquid or platform-specific URL -->
    <form id="myForm" method="post" style="margin-bottom:30px">

      <div class="trx_field">
        <label class="trx_field__label" for="kit_no">Test Barcode</label>
        <input class="trx_field__input" autocomplete="name" type="text" id="kit_no" name="kit_no" value=""
          placeholder="">

      </div>
      <div id="err_kit" class="text-danger hidden" style="font-size: 14px;">This field is required</div>
      <div class="d-flex">
        <button type="button" id="verify_kit" onclick="verifyKit()" value="" class="button" style="margin-top: 10px;">
          <span id="vf_btn">Check Status</span>
          <div id="loader_1" class="loader" style="display: none;"></div>
        </button>
        <button type="button" style="margin-left: 10px;" id="get_pdf" onclick="getPdf()" value=""
          class="button hidden ml-2" style="margin-top: 10px; margin-left: 10px;" name="submit">
          <span id="pdf_btn">Print Kit</span>
          <div id="loader_2" class="loader" style="display: none;"></div>
        </button>
      </div>
    </form>

    <div class="alert-s hidden" id="success_msg">
      <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
      <strong>Success!</strong> kit exists.
      <strong>Status!</strong> <span id="status"></span>.
    </div>

    <div class="alert-e hidden" id="err_msg">
      <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
      <strong>Error!</strong> This Barcode is not exist. Please Contact Customer Service <strong><a
          style="text-decoration: none;" href="tel:001
      833-226-2441">001
          833-226-2441</a></strong>.
    </div>
  </div>
</div>






<script>


  function verifyKit() {
    var kit_no = document.getElementById('kit_no').value;

    if (kit_no == '') {
      document.getElementById('err_kit').classList.remove('hidden');
      return false;
    }

    const button = document.getElementById('verify_kit');
    const loader = document.getElementById('loader_1');
    const buttonText = document.getElementById('vf_btn');

    // Hide button text and show loader
    buttonText.style.display = 'none';
    loader.style.display = 'inline-block';

    const myHeaders = new Headers();
    myHeaders.append("api-key", "6111f22f-twaf-6157-ezsz-0c56cfb01053");

    const formdata = new FormData();
    formdata.append("kit_number", kit_no);

    const requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: formdata,
      redirect: "follow"
    };

    fetch("https://traxmanagementapi.com/api/verify-kit", requestOptions)
      .then(response => response.json()) // Parse the response as JSON
      .then(function (result) {
        document.getElementById('err_kit').classList.add('hidden');
        console.log(result.exists); // Assuming 'result' is now a JavaScript object
        if (result.exists === true) {
          document.getElementById('status').textContent = result.status;
          document.getElementById('success_msg').classList.remove('hidden');
          document.getElementById('err_msg').classList.add('hidden');
          document.getElementById('get_pdf').classList.remove('hidden');
        } else {
          document.getElementById('err_msg').classList.remove('hidden');
          document.getElementById('success_msg').classList.add('hidden');
        }
      })
      .catch(error => console.error(error))
      .finally(() => {
        // Restore button text and hide loader
        buttonText.style.display = 'inline';
        loader.style.display = 'none';
      });

  }

  function getPdf() {

    const button = document.getElementById('get_pdf');
    const loader2 = document.getElementById('loader_2');
    const buttonText = document.getElementById('pdf_btn');

    // Hide button text and show loader
    buttonText.style.display = 'none';
    loader2.style.display = 'inline-block';


    var kit_no = document.getElementById('kit_no').value;
    const myHeaders = new Headers();
    myHeaders.append("api-key", "6111f22f-twaf-6157-ezsz-0c56cfb01053");

    const formdata = new FormData();
    formdata.append("kit_number", kit_no);


    const requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: formdata,
      redirect: "follow"
    };

    fetch("https://traxmanagementapi.com/api/get-pdf", requestOptions)
      .then((response) => response.json())
      .then(function (result) {
        const base64String = result.file;

        function base64ToBlob(base64, mimeType) {
          const byteCharacters = atob(base64);
          const byteNumbers = new Array(byteCharacters.length);
          for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
          }
          const byteArray = new Uint8Array(byteNumbers);
          return new Blob([byteArray], { type: mimeType });
        }

        const pdfBlob = base64ToBlob(base64String, 'application/pdf');
        const downloadLink = document.createElement('a');
        downloadLink.href = window.URL.createObjectURL(pdfBlob);
        downloadLink.setAttribute('download', 'kit_details.pdf');

        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);

      })
      .catch((error) => console.error(error))
      .finally(() => {
        // Restore button text and hide loader
        buttonText.style.display = 'inline';
        loader2.style.display = 'none';
      });
  }


  function changeTab(tabId) {
    // Hide all tab content divs
    var contents = document.getElementsByClassName('tab-content');
    for (var i = 0; i < contents.length; i++) {
      contents[i].style.display = 'none';
    }

    // Remove 'active' class from all tabs
    var tabs = document.getElementsByClassName('tab');
    for (var i = 0; i < tabs.length; i++) {
      tabs[i].classList.remove('active');
    }

    // Show the selected tab content and add 'active' class to the clicked tab
    document.getElementById(tabId).style.display = 'block';
    event.target.classList.add('active');
  }

  function displayErrors(errors) {
    const errorContainer = document.getElementById('reg_errs');
    const errorList = document.getElementById('errorList');
    errorList.innerHTML = '';
    if (errors && Object.keys(errors).length > 0) {
      Object.keys(errors).forEach(key => {
        errors[key].forEach(message => {
          const li = document.createElement('li');
          li.textContent = message;
          errorList.appendChild(li);
        });
      });

      // Show the error container
      errorContainer.style.display = 'block';
    } else {
      // Hide the error container if there are no errors
      errorContainer.style.display = 'none';
    }
  }

  function registerCustomer() {

    var name = document.getElementById('name').value;
    var email = document.getElementById('email').value;
    var phone = document.getElementById('phone').value;
    var barcode = document.getElementById('barcode').value;
    var store_url = document.getElementById('store_url').value;


    const button = document.getElementById('register');
    const loader3 = document.getElementById('loader_3');
    const buttonText = document.getElementById('rg_btn');

    buttonText.style.display = 'none';
    loader3.style.display = 'inline-block';

    const myHeaders = new Headers();
    myHeaders.append("api-key", "6111f22f-twaf-6157-ezsz-0c56cfb01053");

    const formdata = new FormData();
    formdata.append("kit_no", barcode);
    formdata.append("name", name);
    formdata.append("email", email);
    formdata.append("phone", phone);
    formdata.append("store_url", store_url);

    const requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: formdata,
      redirect: "follow"
    };

    fetch("https://traxmanagementapi.com/api/create-customer", requestOptions)
      .then((response) => response.json())
      .then(function (result) {
        if (result.status === 'success') {
          document.getElementById('reg_success').classList.remove('hidden');
          document.getElementById('reg_errs').classList.add('hidden');
        } else {
          document.getElementById('reg_success').classList.add('hidden');
          document.getElementById('reg_errs').classList.remove('hidden');
          displayErrors(result.errors);
        }
      })
      .catch((error) => {
        buttonText.style.display = 'inline';
        loader3.style.display = 'none';
        console.error(error)
      })
      .finally(() => {
        // Restore button text and hide loader
        buttonText.style.display = 'inline';
        loader3.style.display = 'none';
      });

  }



</script>




{% schema %}
{
"name": "VerifyKit",
"target": "section",
"settings": [
{ "type": "product", "id": "product", "label": "product", "autofill": true },
{ "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
]
}
{% endschema %}